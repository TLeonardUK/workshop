// ================================================================================================
//  workshop
//  Copyright (C) 2021 Tim Leonard
// ================================================================================================
#pragma once

#include <span>
#include <string_view>
#include <vector>
#include <unordered_map>
#include <memory>

namespace ws {

// Defines the individual types of token that can be read from a config file.
enum class cvar_config_token_type
{
    invalid,

    literal_string,
    literal_int,
    literal_float,
    literal_bool,
    literal_identifier,

    keyword_if,
    keyword_else,
    keyword_default,

    operator_greater_equal,
    operator_greater,
    operator_less_equal,
    operator_less,
    operator_equal,
    operator_not_equal,
    operator_and,
    operator_or,
    operator_assign,

    brace_open,
    brace_close,
    parenthesis_open,
    parenthesis_close,
    semicolon,

    COUNT
};

// Individual token extracted by lexical analysis from a block of text.
struct cvar_config_token
{
    cvar_config_token_type type = cvar_config_token_type::invalid;
    std::unique_ptr<std::string> text_storage;
    std::string_view text;

    size_t start_index;
    size_t end_index;

    size_t line;
    size_t column;
};

// Responsible for converting a config file into a stream of tokens.
class cvar_config_lexer
{
public:
    // Converts text into a stream of tokens. Returns true on success.
    bool lex(const char* text, const char* path);

    // Gets a reference to all the tokens generated by previous lex calls.
    std::span<cvar_config_token> get_tokens();

private:
    bool end_of_text();
    char next_char();
    char current_char();
    char look_ahead_char();

    bool read_literal_identifier();
    bool read_literal_string();
    bool read_literal_number();

    void new_token(cvar_config_token_type type, size_t start_index, size_t end_index, const std::string& raw_text = "");

private:
    std::string m_path;
    std::string m_text;
    std::vector<cvar_config_token> m_tokens;

    size_t m_position;
    size_t m_current_line;
    size_t m_current_column;

    std::unordered_map<std::string, cvar_config_token_type> m_keyword_lookup = {
        { "if",         cvar_config_token_type::keyword_if },
        { "else",       cvar_config_token_type::keyword_else },
        { "default",    cvar_config_token_type::keyword_default },
        { "true",       cvar_config_token_type::literal_bool },
        { "false",      cvar_config_token_type::literal_bool }
    };

};

}; // namespace ws
